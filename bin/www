
const app = require("../server");
const debug = require("debug")("angular2-nodejs:server");
const http = require("http");


const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);


/// Chat feature 

const server = http.createServer(app);
const io = require("socket.io").listen(server);

io.on("connection", (socket) => {
  console.log("new connection made.");

  socket.on("join", function (data) {
    //joining
    socket.join(data.room);

    console.log(data.user + " joined the room : " + data.room);

    socket.broadcast
      .to(data.room)
      .emit("new user joined", {
        user: data.user,
        message: " has joined this room.",
      });
  });

  socket.on("leave", function (data) {
    console.log(data.user + " left the room : " + data.room);

    socket.broadcast
      .to(data.room)
      .emit("left room", { user: data.user, message: " has left this room." });

    socket.leave(data.room);
  });

  socket.on("message", function (data) {
    io.in(data.room).emit("new message", {
      user: data.user,
      message: data.message,
      room: data.room
    });
    console.log(data)
  });
 
});


const PORT = process.env.PORT;
server.listen(PORT);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const PORT = parseInt(val, 10);

  if (isNaN(PORT)) {

    return val;
  }

  if (PORT >= 0) {

    return PORT;
  }

  return false;
}



function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof PORT === "string" ? "Pipe " + PORT : "Port " + PORT;


  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}



function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.PORT;
  debug("Listening on " + bind);
}
